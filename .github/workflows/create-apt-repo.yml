---
name: "Create apt repo"

"on":  # TODO: This needs to also become a cron for the nightly function to make sense
  push:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build:
    name: Build debs
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        category:
          # TODO: replace refs with real ones once PR is approved
          - name: stable
            # ref: v1.4.0
            ref: stable_deb_testing
          - name: nightly
            # ref: master
            ref: the_debbening
        os:
          - ubuntu-22.04  # Upstream LTS support ends 2027.
          - ubuntu-24.04  # Upstream LTS support ends 2029.
          - debian-12     # Upstream LTS support ends 2028.
        target:
          - name: x86_64-unknown-linux-gnu
            debian-name: amd64
          - name: aarch64-unknown-linux-gnu
            debian-name: arm64
        exclude:  # Nightlies are only for latest versions
          - category: {name: nightly}
            os: ubuntu-22.04
    steps:
      # Step 0. Pick up the stable or nightly source
      - name: Checkout Kanidm
        uses: actions/checkout@v4
        with:
          # TODO: replace repository with upstream once PR is approved
          repository: "jinnatar/kanidm"
          ref: "${{ matrix.category.ref }}"
          submodules: false
      # Overlay the latest packaging tools instead of using the submodule reference which is intended for human use.
      - name: Checkout packaging tools
        uses: actions/checkout@v4
        with:
          path: platform/debian/kanidm_ppa_automation
      - name: Amend PATH
        run: |
          mkdir "${HOME}/bin"
          echo "${HOME}/bin" >> $GITHUB_PATH
      # Step 0.5. Get a bunch of tools and dependencies
      - name: Install UBI
        shell: bash
        run: |
          curl --silent --location \
              https://raw.githubusercontent.com/houseabsolute/ubi/master/bootstrap/bootstrap-ubi.sh |
              sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install cross with UBI
        shell: bash
        run: |
          "ubi" --project cross-rs/cross --in "${HOME}/bin"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install deb build dependencies
        run: |
            sudo -E platform/debian/kanidm_ppa_automation/scripts/install_ci_build_dependencies.sh \
              "${{ matrix.target.debian-name }}"
      # Step 1. Crossbuild
      - name: Build packages (cross bins & libs)
        shell: bash
        run: |
          platform/debian/kanidm_ppa_automation/scripts/crossbuild.sh \
            "${{ matrix.os }}-${{ matrix.target.name }}"
        env:
          VERBOSE: true
      # Step 1.5. Strip binaries
      # This significantly helps with storage limits.
      # ~12 MiB packages vs ~82MiB packages as of 2024.
      - name: Strip binaries
        shell: bash
        run: |
          find "target/${{ matrix.target.name }}/release" -maxdepth 1 -not -name "*.d" -name "kanidm*" \
          | xargs llvm-strip --strip-all
      # Step 2. deb build
      - name: Build packages (debs)
        run: |
          platform/debian/kanidm_ppa_automation/scripts/build_debs.sh "${{ matrix.target.name }}"

      - name: Upload debs
        uses: actions/upload-artifact@v4
        with:
          name: "${{matrix.category.name}}-${{ matrix.os }}-${{ matrix.target.name }}"
          path: |
            target/${{ matrix.target.name }}/debian/*.deb

  # Step 3. Create the APT repo from the debs
  create-repo:
    name: Create APT repo
    needs: build
    runs-on: ubuntu-24.04
    steps:
      - name: Download previously built debs
        uses: actions/download-artifact@v4
        with:
          path: debs
          merge-multiple: false  # Preserve which debs are from which matrix item
      - name: List packages
        run: |
          find $(pwd) -name '*.deb'
      - name: Create Aptly repo
        uses: jinnatar/actions-aptly-repo@v1.1.0
        with:
          name: kanidm
          artifact_name: kanidm_ppa_snapshot
          repos: |
              noble,stable,\"amd64,arm64\",debs/stable-ubuntu-24.04-*-unknown-linux-gnu/*.deb
              jammy,stable,\"amd64,arm64\",debs/stable-ubuntu-22.04-*-unknown-linux-gnu/*.deb
              noble,nightly,\"amd64,arm64\",debs/nightly-ubuntu-24.04-*-unknown-linux-gnu/*.deb
              bookworm,stable,\"amd64,arm64\",debs/stable-debian-12-*-unknown-linux-gnu/*.deb
              bookworm,nightly,\"amd64,arm64\",debs/nightly-debian-12-*-unknown-linux-gnu/*.deb
          # When GPG secrets are not available (say a PR), the repo WILL NOT be signed.
          # Provide your own key material in a fork to test with signed repo snapshots.
          gpg_private_key: "${{ secrets.GPG_PRIVATE_KEY }}"
          gpg_passphrase: "${{ secrets.PASSPHRASE }}"

  # Step 4. Publish the created repo if this meets the requirements for publishing
  # i.e. need to ignore pull-requests and perhaps even merges that don't have a specific tag.
  # Point being to avoid pushing out churn all the way to downstream users unless we actually want them to update.
